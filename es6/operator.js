/*
一、 赋值运算符
除了最简单的`=`，还有`+=` `*=`等一系列复合赋值运算符
此外，可以解构赋值
*/
var foo = ["one", "two", "three"];
// 不使用解构
var one = foo[0];
var two = foo[1];
var three = foo[2];
// 使用解构
var [one, two, three] = foo;

/*
二、 比较运算符
多数情况下，如果比较的两个操作数是不同类型，js会尝试转换它们至恰当的类型再比较，但===和!==不会转换其类型
==  !=  ===  !==  >  >=  <  <=
*/

/*
三、 算术运算符
+  -  *  /  %  ++  --  -  +  **
其中，自增、自减和C一样支持放在变量的前缀或后缀
一元负值(-)和减号意思不同，返回操作数的负值
一元正值(+)，如操作数之前不是number，则试图将其转换为number
*/
var x = 3;
console.log(-x); //-3
console.log(+'3'); // 3
console.log('3'); // '3'
console.log(+true); // 1

/*
四、 位运算符
&  |  ^  ~  <<  >>  >>>
会把操作数视为32位的二进制串来进行位运算
如果操作数转换后多于32位，则取低的32位
~将所有的32位取反，然后其最左边的一位如果为1则表示负数，所以`~x`相当于`-x-1`
>>> 是无符号右移，将操作数右移x位，右边移出去的位丢弃，左边空的位用0补齐
*/